let maxSpeed = 1000;
SigninLogs
| where ResultType == "0"
| extend latitude_ = todouble(parse_json(tostring(LocationDetails.geoCoordinates)).latitude)
| extend longitude_ = todouble(parse_json(tostring(LocationDetails.geoCoordinates)).longitude)
| extend countryOrRegion = tostring(LocationDetails.countryOrRegion)
| extend state = tostring(LocationDetails.state)
| extend location = strcat(state,' - ', countryOrRegion)
| where location <> ' - '
| extend browser = tostring(DeviceDetail.browser)
| summarize Count=count(),IP=any(IPAddress),Last=max(TimeGenerated) by UserDisplayName, latitude_, longitude_, Locations=tostring(location), browser,AppDisplayName, UserPrincipalName, Location
| extend coordinates = pack_array(latitude_,longitude_)
| summarize coordinates=any(coordinates),StateCountries=makeset(Locations),Last=max(Last),IP=any(IP),Apps=makeset(AppDisplayName),Browsers=makeset(browser), Locations=makeset(Locations) by UserDisplayName, UserPrincipalName, Location
| summarize Coordinates=makeset(coordinates),NumberOfCountries=dcount(Location) ,StateCountries=makeset(Locations),Timestamps=makeset(Last),IPs=makeset(IP),Apps=makeset(Apps),Browsers=makeset(Browsers) by UserDisplayName, UserPrincipalName
| where NumberOfCountries > 1
| extend distance = round(geo_distance_2points(todouble(Coordinates[1]),todouble(Coordinates[0]),todouble(Coordinates[3]),todouble(Coordinates[2]))/1000,0)
| extend hours = abs(datetime_diff('hour', todatetime(Timestamps[1]),todatetime(Timestamps[0])))
| where hours > 0
| extend speedKmPerHour = round(distance/hours,0)
| where speedKmPerHour > maxSpeed
| project-reorder Timestamps, UserDisplayName, UserPrincipalName, IPs, speedKmPerHour, distance, hours, StateCountries, Apps, Browsers, StateCountries
| sort by UserPrincipalName asc
| extend IPs = replace('[\\[|\\|\\\\|"\\]]','',tostring(IPs))